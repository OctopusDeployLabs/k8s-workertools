name: Docker Image CI

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:

  get-version-number:
    runs-on: windows-latest
    outputs:
      VERSION: ${{ steps.step1.outputs.VERSION }}
      GCLOUD_CLI_VERSION: ${{ steps.step1.outputs.GCLOUD_CLI_VERSION }}
      CONTINUE: ${{ steps.step1.outputs.Continue }}
    steps:    
    - uses: actions/checkout@v3
    - id: step1
      name: Compare latest version with container
      run: |
        Write-Output "Getting GCLOUD CLI version (needed for gke-auth-plugin)"
        $googleCloudSdkInfo = Invoke-RestMethod "https://registry.hub.docker.com/v2/repositories/google/cloud-sdk/tags?page=1"
        $otherImages = $googleCloudSdkInfo.results | Where-Object { $_.name -ine "latest" }
        $latestTag = $googleCloudSdkInfo.results | Where-Object { $_.name -ieq "latest" }
        
        if($null -eq $latestTag)  {
            throw "Couldnt find latest tag for Google Cloud SDK version from DockerHub"
        }
        
        $latestTagImage = $latestTag.images | Where-Object {$_.os -ieq "linux" -and $_.architecture -ieq "amd64" -and $_.status -ieq "active"} | Select-Object -First 1
        if($null -eq $latestTagImage)  {
            throw "Couldnt find latest tag image for Google Cloud SDK version for linux/amd64"
        }
        $latestDigest = $latestTagImage.digest
        Write-Output "Found latest digest: $latestDigest"

        $GCLOUD_CLI_VERSION = ""
        foreach($result in $otherImages) {
            $matchingImageDigest = $result.images | Where-Object {$_.os -ieq "linux" -and $_.architecture -ieq "amd64" -and $_.status -ieq "active" -and $_.digest -ieq $latestDigest } | Select-Object -First 1
            if($null -eq $matchingImageDigest) {
                continue;
            }
            else {
                $version = $result.name
                Write-Output "Found version '$version' that matches digest: $latestDigest"
                $versionSplit = $version.Split(".")
                $GCLOUD_CLI_VERSION = "$($versionSplit[0]).$($versionSplit[1]).$($versionSplit[2])"
                break;
            }
        }

        if ([string]::IsNullOrWhiteSpace($GCLOUD_CLI_VERSION)) {
            throw "No GCLOUD CLI version with digest $latestDigest found"
        }
        else {
            echo "GCLOUD_CLI_VERSION=$GCLOUD_CLI_VERSION" >> $env:GITHUB_OUTPUT
        }

        Write-Output "Getting Kubectl version"
        $chocoInformationRaw = choco info kubernetes-cli --limitoutput
        $version = ($chocoInformationRaw.Split("|"))[1]
        $versionSplit = $version.Split(".")
        $versionToCompare = "$($versionSplit[0]).$($versionSplit[1]).$($versionSplit[2])"

        $workerToolsTags = Invoke-RestMethod "https://registry.hub.docker.com/v2/repositories/octopuslabs/k8s-workertools/tags?page_size=50"
        $matchingTag = $workerToolsTags.results | Where-Object { $_.name -eq $versionToCompare }

        echo "VERSION=$versionToCompare" >> $env:GITHUB_OUTPUT

        if ($null -ne $matchingTag)
        {
            Write-Host "Docker container already has latest version"
            echo "CONTINUE=No" >> $env:GITHUB_OUTPUT
        }
        else
        {
            Write-Host "We need to upgrade the container to $versionToCompare"            
            echo "CONTINUE=Yes" >> $env:GITHUB_OUTPUT
        }      
      shell: powershell

  build-ubuntu:
    needs: [get-version-number]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3    
    
    - name: DockerHub Login
      env:
        USERNAME: ${{ secrets.DOCKER_HUB_USER }}
        PASSWORD: ${{ secrets.DOCKER_HUB_PAT }}
      run: docker login --username $USERNAME --password "$PASSWORD"
    
    - name: Build the ubuntu.2004 Docker image 
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker build ./ubuntu-2004 --tag octopuslabs/k8s-workertools:$VERSION_NUMBER-ubuntu.2004 --tag octopuslabs/k8s-workertools:latest-ubuntu.2004
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Push the ubuntu.2004 version image
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker push octopuslabs/k8s-workertools:$VERSION_NUMBER-ubuntu.2004
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Push the latest ubuntu.2004 image
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker push octopuslabs/k8s-workertools:latest-ubuntu.2004
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}

    - name: Build the ubuntu.2204 Docker image      
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker build ./ubuntu-2204 --tag octopuslabs/k8s-workertools:$VERSION_NUMBER-ubuntu.2204 --tag octopuslabs/k8s-workertools:latest-ubuntu.2204
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Push the ubuntu.2204 version image
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker push octopuslabs/k8s-workertools:$VERSION_NUMBER-ubuntu.2204
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Push the latest ubuntu.2204 image
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker push octopuslabs/k8s-workertools:latest-ubuntu.2204
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
  build-win-2019:
    needs: [get-version-number]
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v3
        
    - name: DockerHub Login
      env:
        USERNAME: ${{ secrets.DOCKER_HUB_USER }}
        PASSWORD: ${{ secrets.DOCKER_HUB_PAT }}
      run: docker login --username ${env:USERNAME} --password "${env:PASSWORD}"
    
    - name: Build the win2019 Docker image
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
        GCLOUD_CLI_VERSION: ${{ needs.get-version-number.outputs.GCLOUD_CLI_VERSION }}
      run: docker build ./windows-2019 --build-arg GCLOUD_CLI_VERSION=${env:GCLOUD_CLI_VERSION} --tag octopuslabs/k8s-workertools:${env:VERSION_NUMBER}-windows.2019 --tag octopuslabs/k8s-workertools:latest-windows.2019
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Push the win2019 version image
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker push octopuslabs/k8s-workertools:${env:VERSION_NUMBER}-windows.2019
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Push the latest win2019 image
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker push octopuslabs/k8s-workertools:latest-windows.2019
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
  
  build-docker-manifest:
    needs: [get-version-number, build-ubuntu, build-win-2019]
    runs-on: ubuntu-latest
    
    steps:
    - name: DockerHub Login
      env:
        USERNAME: ${{ secrets.DOCKER_HUB_USER }}
        PASSWORD: ${{ secrets.DOCKER_HUB_PAT }}
      run: docker login --username $USERNAME --password "$PASSWORD"
      
    - name: Build Manifest
      run: docker manifest create octopuslabs/k8s-workertools:latest octopuslabs/k8s-workertools:latest-windows.2019 octopuslabs/k8s-workertools:latest-ubuntu.2004
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Push Manifest
      run: docker manifest push octopuslabs/k8s-workertools:latest
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Build Version Manifest
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker manifest create octopuslabs/k8s-workertools:$VERSION_NUMBER octopuslabs/k8s-workertools:$VERSION_NUMBER-windows.2019 octopuslabs/k8s-workertools:$VERSION_NUMBER-ubuntu.2004
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
      
    - name: Push Version Manifest
      env:
        VERSION_NUMBER: ${{ needs.get-version-number.outputs.VERSION }}     
      run: docker manifest push octopuslabs/k8s-workertools:$VERSION_NUMBER
      if: ${{ needs.get-version-number.outputs.CONTINUE == 'Yes' }}
